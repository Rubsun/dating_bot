services:
  profile_service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: "dating_bot-profile_service"
    environment:
      PROFILE_SERVICE_CONFIG_PATH: "./components/profile_service/configs/app.docker.toml"
      LOG_LEVEL: "INFO"
      LOG_FORMAT: "TEXT"
    command: uv run uvicorn components.profile_service.main:app --port 8000 --host 0.0.0.0 
    ports:
      - "127.0.0.1:8000:8000"
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  rating_service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: "dating_bot-rating_service"
    environment:
      RATING_SERVICE_CONFIG_PATH: "./components/rating_service/configs/app.docker.toml"
      LOG_LEVEL: "INFO"
      LOG_FORMAT: "TEXT"
    command: uv run uvicorn components.rating_service.main:app --port 8001 --host 0.0.0.0
    ports:
      - "127.0.0.1:8001:8001"
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  matching_service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: "dating_bot-matching_service"
    environment:
      MATCHING_SERVICE_CONFIG_PATH: "./components/matching_service/configs/app.docker.toml"
      LOG_LEVEL: "INFO"
      LOG_FORMAT: "TEXT"
    command: uv run uvicorn components.matching_service.main:app --port 8002 --host 0.0.0.0 
    ports:
      - "127.0.0.1:8002:8002"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  notification_service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: "dating_bot-notification_service"
    environment:
      NOTIFICATION_SERVICE_CONFIG_PATH: "./components/notification_service/configs/app.docker.toml"
    command: uv run python -m components.notification_service.poll_matches
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  api_gateway:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: "dating_bot-api_gateway"
    environment:
      API_GATEWAY_CONFIG_PATH: "./components/api_gateway/configs/app.docker.toml"
    command: uv run python -m components.api_gateway.main
    restart: unless-stopped
  #      redis:
  #        condition: service_started

  #  db_migrations:
  #    build:
  #      context: .
  #      dockerfile: Dockerfile
  #    container_name: "dating_bot-db_migrations"
  #    environment:
  #      DATING_BOT_CONFIG_PATH: "./configs/app.docker.toml"
  #    command: "uv run alembic upgrade head"
  #    depends_on:
  #      db:
  #        condition: service_healthy

  db:
    image: postgis/postgis:16-3.4-alpine
    container_name: "dating_bot-db"
    env_file:
      - configs/db.env
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d mydb" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

  redis:
    image: redis:7.2.4-alpine
    container_name: "dating_bot-redis"
    ports:
      - "127.0.0.1:6379:6379"
    restart: "unless-stopped"
    volumes:
      - "./configs/:/usr/local/etc/redis"
      - redis_data:/data
    command: "redis-server /usr/local/etc/redis/redis.conf"

  s3:
    image: minio/minio:latest
    container_name: "dating_bot-minio"
    restart: on-failure
    env_file:
      - configs/minio.env
    ports:
      - "127.0.0.1:9000:9000"
    #      - "127.0.0.1:9090:9090"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    volumes:
      - ~/docker/minio/data:/data
    command: server /data --console-address ":9090"

  prometheus:
    image: prom/prometheus:latest
    container_name: "dating_bot-prometheus"
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.listen-address=:9090'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: "dating_bot-grafana"
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    depends_on:
      - prometheus
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3.13.7-management-alpine
    container_name: "dating_bot-rabbitmq"
    ports:
      - "127.0.0.1:5672:5672"
      - "127.0.0.1:15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 15s
      timeout: 10s
      retries: 4
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  grafana_data: