import httpx
from aiogram import Router, F
from aiogram import types
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext

from components.api_gateway.controllers.bot.keyboards import gender_kb, remove_kb, skip_kb
from components.api_gateway.controllers.bot.states import ProfileCreationStates

router = Router()


@router.message(CommandStart())
async def start_cmd(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    first_name = message.from_user.first_name

    async with httpx.Client() as client:
        response = await client.get(f"http://localhost:8001/api/v1/profiles/telegram/{user_id}")  # TODO –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —é–∑–µ—Ä–∞

        if response.status_code == 404:
            await state.update_data(
                user_id=user_id,
            )

            await state.set_state(ProfileCreationStates.waiting_for_first_name)

            await message.answer(
                f"–ü—Ä–∏–≤–µ—Ç, {first_name}! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –î—ç–π—Ç–∏–Ω–≥ –ë–æ—Ç!\n"
                "–ß—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –º–æ–≥–ª–∏ —Ç–µ–±—è –Ω–∞–π—Ç–∏, –¥–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É.\n\n"
                "üìù <b>–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç</b> (–≠—Ç–æ –∏–º—è –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)",
                parse_mode="HTML",
            )


        elif response.status_code == 200:
            await message.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞. –ó–∞–π–¥–∏—Ç–µ –≤ –≤–µ–± –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")  # TODO –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É —Å –∞–ø–∫–æ–π


@router.message(ProfileCreationStates.waiting_for_first_name)
async def waiting_for_first_name(message: types.Message, state: FSMContext):
    first_name = message.text

    await state.update_data(first_name=first_name)
    await state.set_state(ProfileCreationStates.waiting_for_last_name)
    await message.answer(f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é")


@router.message(ProfileCreationStates.waiting_for_last_name)
async def waiting_for_last_name(message: types.Message, state: FSMContext):
    last_name = message.text
    await state.update_data(last_name=last_name)
    await state.set_state(ProfileCreationStates.waiting_for_bio)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
                         reply_markup=skip_kb)


@router.message(ProfileCreationStates.waiting_for_bio)
async def waiting_for_bio(message: types.Message, state: FSMContext):
    bio = message.text.strip()

    if bio.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        bio = ""

    await state.update_data(bio=bio)
    await state.set_state(ProfileCreationStates.waiting_for_age)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç", reply_markup=remove_kb)


@router.message(ProfileCreationStates.waiting_for_age)
async def waiting_for_age(message: types.Message, state: FSMContext):
    age_text = message.text
    if not age_text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
        return

    age = int(age_text)
    if age <= 16:
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å—Ç–∞—Ä—à–µ 16 –ª–µ—Ç.")
        return

    await state.update_data(age=age)
    await state.set_state(ProfileCreationStates.waiting_for_gender)
    await message.answer(text="–ö—Ç–æ –≤—ã", reply_markup=gender_kb)



@router.callback_query(F.data.startswith("select_gender_"),
                       StateFilter(ProfileCreationStates.waiting_for_gender))
async def select_gender(callback: types.CallbackQuery, state: FSMContext):
    gender = callback.data.split("_")[1]
    await state.update_data(gender=gender)
    await state.set_state(ProfileCreationStates.waiting_for_city)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥")


@router.message(ProfileCreationStates.waiting_for_city)
async def waiting_for_city(message: types.Message, state: FSMContext):
    city = message.text.strip()
    if not (city.istitle() and city.isalpha()):
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã.")
        return

    await state.update_data(city=city)
    await state.set_state(ProfileCreationStates.waiting_for_photo)
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è")


@router.message(ProfileCreationStates.waiting_for_photo)
async def waiting_for_photo(message: types.Message, state: FSMContext):
    profile_data = await state.get_data()
    photo_bytes = None

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ
    if message.photo:
        photo = message.photo[-1]
        file_info = await message.bot.get_file(photo.file_id)
        file = await message.bot.download_file(file_info.file_path)
        photo_bytes = file.read()

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    elif message.text and message.text.strip().lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        photo_bytes = b""

    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
        return

    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É!", reply_markup=remove_kb)

    form_data = {
        "user_id": str(profile_data["user_id"]),
        "first_name": profile_data["first_name"],
        "last_name": profile_data["last_name"],
        "bio": profile_data.get("bio", ""),
        "age": profile_data["age"],
        "gender": profile_data["gender"],
        "city": profile_data["city"],
    }

    files = {"photo": photo_bytes} if photo_bytes else {}

    async with httpx.AsyncClient() as client:
        response = await client.post(
            "http://localhost:8001/api/v1/profiles/",
            data=form_data,
            files=files
        )
        if response.status_code == 201:
            await message.answer("‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã.")

    await state.clear()
